#blenderData[model] <- as.data.frame(forecast(object=model_fit, h=blend_size))[["Point Forecast"]]
testingData[model] <- as.data.frame(forecast(object=model_fit, h=test))[["Point Forecast"]]
#Naive forecast
model <- "naive"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- c(ensembleData[nrow(ensembleData),labelName],blenderData[-nrow(blenderData),labelName])
testingData[model] <- c(ensembleData[nrow(ensembleData),labelName],testingData[-nrow(testingData),labelName])
#Croston's
model = "Croston"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- as.data.frame(crost(ensembleData[,labelName], h=blend_size,
#                                         w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
testingData[model] <- as.data.frame(crost(ensembleData[,labelName], h=test,
w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
#SBA
model = "SBA"
usedMethods <- c(usedMethods, model)
testingData[model] <- as.data.frame(crost(ensembleData[,labelName], h=test, type = "sba",
w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
#TSB
model = "TSB"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- tsb(ensembleData[,labelName], h=blend_size, init.opt = TRUE)$frc.out
testingData[model] <- tsb(ensembleData[,labelName], h=test, init.opt = TRUE)$frc.out
testingData$mean <- rowMeans(subset(testingData, select = usedMethods), na.rm = TRUE)
write.csv(testingData$xgbTree,"resxgb.csv", row.names = FALSE)
library(tsintermittent)
library(readr)
library(reshape2)
library(ggplot2)
library("dplyr")
args = commandArgs(trailingOnly=TRUE)
numofSample=as.character(args[1])
inputy <- c("featureCreation/new", numofSample,"Y.csv")
inputy2 <- paste(inputy, collapse="")
ydata <- read_csv(inputy2)
lag <- 30
setwd("C:/Users/Berkay Akbulut/Desktop/Ders/Bitirme/indr491-master/PipeStructure")
args = commandArgs(trailingOnly=TRUE)
numofSample=as.character(args[1])
inputy <- c("featureCreation/new", numofSample,"Y.csv")
inputy2 <- paste(inputy, collapse="")
ydata <- read_csv(inputy2)
inputy <- c("featureCreation/new100Y.csv")
inputy2 <- paste(inputy, collapse="")
ydata <- read_csv(inputy2)
lag <- 30
#numbering for dates to reshape the data to proper format
ydata$dates <- rep(1:(207-lag), numofSample)
lag <- 30
#numbering for dates to reshape the data to proper format
ydata$dates <- rep(1:(207-lag), 100)
#proper format for data to SBC categorization
new_df <- subset(dcast(ydata, dates ~ product_id, value.var="sales"), select = -c(dates))
#SBC categorization
ts_cate_obj <- idclass(new_df, type = "SBC", outplot = "none")
ts_categorization <- data.frame(product_id = row.names(t(new_df)), cv2 = ts_cate_obj$cv2,
p = ts_cate_obj$p) %>%
mutate(demand_cate = case_when(p < 1.32 & cv2 < 0.49 ~ "Smooth",
p >= 1.32 & cv2 < 0.49 ~ "Intermittent",
p < 1.32 & cv2 >= 0.49 ~ "Erratic",
p >= 1.32 & cv2 >= 0.49 ~ "Lumpy"))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 3)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" )
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=3 , angle=45, fontface="bold" )
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 1)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" )
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 1)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" )
p + scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,6))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 1)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p + scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,6))
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" )
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 1)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,6))
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,4))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(4,4,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,4))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.75,1.75, 0.75, 1.75),
y = c(3,3,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.7,2)) +
scale_y_continuous(limits = c(0,4))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(1,1.75, 1, 1.75),
y = c(3,3,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(1,2)) +
scale_y_continuous(limits = c(0,4))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(1,1.75, 1, 1.75),
y = c(3,3,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.8,2)) +
scale_y_continuous(limits = c(0,4))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(1,1.75, 1, 1.75),
y = c(3,3,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.8,2)) +
scale_y_continuous(limits = c(0,3))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.9,1.75, 0.9, 1.75),
y = c(2.5,2.5,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.8,2)) +
scale_y_continuous(limits = c(0,3))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(0.9,1.75, 0.9, 1.75),
y = c(2.5,2.5,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.9,2)) +
scale_y_continuous(limits = c(0,3))
p <- ggplot(ts_categorization, aes(x = p, y = cv2, color= 'red'), xlim=c(0.7,2), ylim=c(0,6)) +
geom_point(size = 2)
# a data frame with all the annotation info
annotation <- data.frame(
x = c(1,1.75, 1, 1.75),
y = c(2.5,2.5,0,0),
label = c("ERRATIC", "LUMPY", "SMOOTH", "INTERMITTENT")
)
p +
# horizontal
geom_hline(yintercept=0.49, color="black", size=1) +
# vertical
geom_vline(xintercept=1.32, color="black", size=1) +
#geom_text(data=annotation, aes(x=x, y=y, label=label),
#           color="orange",
#           size=7 , angle=0, fontface="bold" )
geom_label(data=annotation, aes( x=x, y=y, label=label),
color="black",
size=5 , angle=45, fontface="bold" ) +
scale_x_continuous(limits = c(0.9,2)) +
scale_y_continuous(limits = c(0,3))
libraries <- c("readr","forecast","caret","kernlab","gbm","e1071","dplyr","glmnet","randomForest","rpart", "greybox", "ggplot2","doParallel")
lapply(libraries, require, character.only = TRUE)
# library(e1071)
# library("dplyr")
# library(glmnet) #For elastic net -> regularization algorithm
# library(randomForest)
# library(rpart)
# library("greybox")
#
# # Miscellenaus
# library(ggplot2)
#Set seed for reproducibility
set.seed(1)
inputy <- c("new100Y.csv")
inputy2 <- paste(inputy, collapse="")
inputx <- c("new100.csv")
inputx2 <- paste(inputx, collapse="")
inputElastic<-c("newElastic100.csv")
inputElastic2 <- paste(inputElastic, collapse="")
ydata <- read_csv(inputy2)
xdata <- read_csv(inputx2)
elastic_coefs <- read_csv(inputElastic2)
setwd("C:/Users/Berkay Akbulut/Desktop/Ders/Bitirme/indr491-master/ensemble")
inputy <- c("new100Y.csv")
inputy2 <- paste(inputy, collapse="")
inputx <- c("new100.csv")
inputx2 <- paste(inputx, collapse="")
inputElastic<-c("newElastic100.csv")
inputElastic2 <- paste(inputElastic, collapse="")
ydata <- read_csv(inputy2)
xdata <- read_csv(inputx2)
elastic_coefs <- read_csv(inputElastic2)
inputSBC<-c("new100SBC.csv")
inputSBC2 <- paste(inputSBC, collapse="")
dataCategorizes <- read_csv(inputSBC2)
inputPandemic <- c("usd_and_pandemic.csv")
inputPandemic2 <- paste(inputPandemic, collapse="")
pandemic <- read_csv(inputPandemic2)
c1<- makePSOCKcluster(12)
registerDoParallel(c1)
# FOR LOOP entry point, for simplicity I focused on single product
# However, since following code will depend on id, this can be easilty enveloped in a foor loop
patterns <- c("brand_ID_.","size_.","gender_.*")
any_matching = Reduce(`|`, lapply(patterns, grepl, colnames(xdata)))
resultX = colnames(xdata)[! any_matching]
drop <- resultX
xdata<-xdata[,(names(xdata) %in% drop)]
xdata <- subset(xdata, select = -c(product_id))
df <- cbind(ydata, xdata)
ids <- unique(ydata$product_id)
writeCSV <- function (final_data,numofSample){
#ABCtype,SBCtype,clustering will be added later
output00 <- c("newAverage.csv")
output002 <- paste(output00, collapse="")
write.csv(final_data,output002, row.names = FALSE)
}
whichpart <- function(x, n) {
nx <- length(x)
p <- nx-n
xp <- sort(x, partial=p)[p]
which(x > xp)
}
is.rankdeficient <- function(xregg) {
constant_columns <- apply(xregg, 2, is.constant)
if (any(constant_columns)) {
xregg <- xregg[, -which(constant_columns)[1]]
}
sv <- svd(na.omit(cbind(rep(1, NROW(xregg)), xregg)))$d
min(sv)/sum(sv) < .Machine$double.eps
}
df_prod <- df[df$product_id == ids[2],] ## product y data
df_prod <- subset(df_prod, select = -c(product_id))
elastic_coef <- filter(elastic_coefs, product_id == ids[2])[, -1]
regressors <- which((elastic_coef)[-1]!= 0)
df_prod<-cbind(subset(df_prod, select = c(sales)), (df_prod[-1])[,regressors])
df_prod$`USD/TL` <- pandemic$`USD/TL`
df_prod$Cases <- pandemic$Cases
#categorize of prod
dataCategorizes.selected <- dataCategorizes[dataCategorizes$product_id == ids[1],] ##
categorizationName <- dataCategorizes.selected$demand_cate[1]
# Partition data for training, blending and testing purposes
# Assuming that all data is of same size
train_size <- 150 #MODIFY
blend_size <- 0  #MODIFY
test <- 27        #MODIFY
#Set to preferred value
testing_horizon <- 1 #MODIFY
# Use to remove linear dependence
comboInfo <- findLinearCombos(subset(df_prod, select = -c(sales)))
df_prod <- df_prod[, -comboInfo$remove]
# Parition data
ensembleData <- df_prod[1:train_size,] # Will be used to train individual models
testingData <- df_prod[(train_size+1):177,] # Will be used to test overall model performance
testingData$Cases <- testingData$Cases * 1.5
labelName <- "sales" # Name of the predictor variable
# Modify acordingly to capture irrelevant features such as product id
predictors <- names(ensembleData)[names(ensembleData) != c(labelName)] #MODIFY
# Define  training control, one for caret, another for non-caret usage for individual model training
number_of_splits <- 7 #MODÃÂÃÂ°FY -> number of train,test pairs
myControl <- trainControl(method = "timeslice",
initialWindow = train_size - number_of_splits*testing_horizon,
horizon = testing_horizon,
skip = testing_horizon -1,
fixedWindow = FALSE)
#Ensembling method, trained on blend data
usedMethods <- c("xgbTree", "gbm", "rf","svmRadial")
#ensembling_method <- "rf" #MODIFY
for(model in usedMethods){
print(model)
model_fit <- train(ensembleData[,predictors], ensembleData[,labelName], method=model, trControl=myControl, verbose = FALSE)
#ensembleData[model] <- predict(object=model_fit, ensembleData[,predictors])
#blenderData[model] <- predict(object=model_fit, blenderData[,predictors])
testingData[model] <- predict(object=model_fit, testingData[,predictors])
}
#Elastic net
elastic.fit <- train(ensembleData[,predictors], ensembleData[,labelName], method="glmnet", trControl=myControl)
elastic_coef <- coef(elastic.fit$finalModel, s =  elastic.fit$finalModel$lambdaOpt)
regressors <- which(elastic_coef[-1]!= 0) # -1 to drop intercept term
#In addition lets add elastic net as a forecasting algorithm
model <- "glmnet"
usedMethods <- c(usedMethods, model)
#ensembleData[model] <- predict(object=model_fit, ensembleData[,predictors])
#blenderData[model] <- predict(object=elastic.fit, blenderData[,predictors])
testingData[model] <- predict(object=elastic.fit, testingData[,predictors])
#ETS
model = "ETS"
usedMethods <- c(usedMethods, model)
model_fit <- ets(as.vector(ensembleData[,labelName]))
#blenderData[model] <- as.data.frame(forecast(object=model_fit, h=blend_size))[["Point Forecast"]]
testingData[model] <- as.data.frame(forecast(object=model_fit, h=test))[["Point Forecast"]]
#Naive forecast
model <- "naive"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- c(ensembleData[nrow(ensembleData),labelName],blenderData[-nrow(blenderData),labelName])
testingData[model] <- c(ensembleData[nrow(ensembleData),labelName],testingData[-nrow(testingData),labelName])
#Croston's
model = "Croston"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- as.data.frame(crost(ensembleData[,labelName], h=blend_size,
#                                         w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
testingData[model] <- as.data.frame(crost(ensembleData[,labelName], h=test,
w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
#SBA
model = "SBA"
usedMethods <- c(usedMethods, model)
testingData[model] <- as.data.frame(crost(ensembleData[,labelName], h=test, type = "sba",
w=NULL, cost='mae', init.opt = TRUE)$components$c.out)$Demand
#TSB
model = "TSB"
usedMethods <- c(usedMethods, model)
#blenderData[model] <- tsb(ensembleData[,labelName], h=blend_size, init.opt = TRUE)$frc.out
testingData[model] <- tsb(ensembleData[,labelName], h=test, init.opt = TRUE)$frc.out
testingData$mean <- rowMeans(subset(testingData, select = usedMethods), na.rm = TRUE)
write.csv(testingData$gbm,"resgbm.csv", row.names = FALSE)
write.csv(testingData$rf,"resgbm.csv", row.names = FALSE)
write.csv(testingData$rf,"resrf.csv", row.names = FALSE)
write.csv(testingData$mean,"resmean.csv", row.names = FALSE)
